/*
 * Created on 21 oct. 2014 ( Time 08:51:15 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package emn.tp.persistence.services.fake;

import java.util.List;
import java.util.Map;

import emn.tp.bean.jpa.ParticipantEntity;
import emn.tp.persistence.commons.fake.GenericFakeService;
import emn.tp.persistence.services.ParticipantPersistence;

/**
 * Fake persistence service implementation ( entity "Participant" )
 *
 * @author Telosys Tools Generator
 */
public class ParticipantPersistenceFAKE extends GenericFakeService<ParticipantEntity> implements ParticipantPersistence {

	public ParticipantPersistenceFAKE () {
		super(ParticipantEntity.class);
	}
	
	protected ParticipantEntity buildEntity(int index) {
		ParticipantEntity entity = new ParticipantEntity();
		// Init fields with mock values
		entity.setMail( nextString() ) ;
		entity.setName( nextString() ) ;
		entity.setFirstname( nextString() ) ;
		entity.setCompany( nextString() ) ;
		return entity ;
	}
	
	
	public boolean delete(ParticipantEntity entity) {
		log("delete ( ParticipantEntity : " + entity + ")" ) ;
		return true;
	}

	public boolean delete( String mail ) {
		log("delete ( PK )") ;
		return true;
	}

	public void insert(ParticipantEntity entity) {
		log("insert ( ParticipantEntity : " + entity + ")" ) ;
	}

	public ParticipantEntity load( String mail ) {
		log("load ( PK )") ;
		return buildEntity(1) ; 
	}

	public List<ParticipantEntity> loadAll() {
		log("loadAll()") ;
		return buildList(40) ;
	}

	public List<ParticipantEntity> loadByNamedQuery(String queryName) {
		log("loadByNamedQuery ( '" + queryName + "' )") ;
		return buildList(20) ;
	}

	public List<ParticipantEntity> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) {
		log("loadByNamedQuery ( '" + queryName + "', parameters )") ;
		return buildList(10) ;
	}

	public ParticipantEntity save(ParticipantEntity entity) {
		log("insert ( ParticipantEntity : " + entity + ")" ) ;
		return entity;
	}

	public List<ParticipantEntity> search(Map<String, Object> criteria) {
		log("search (criteria)" ) ;
		return buildList(15) ;
	}

	@Override
	public long countAll() {
		return 0 ;
	}

}
